▷ 디렉티브
	템플릿 안에서 사용하는 v-로 시작하는 속성
	HTML 요소와 관련된 작업을 지정할 수 있다. 여러가지 종류 존재!
	데이터 바인딩의 목적을 위해 사용한다.
	(데이터 바인딩은 UI 요소와 데이터 소스 간의 연결)

▶ 기본 디렉티브 -> 단방향 데이터 바인딩
	Vue 인스턴스의 데이터가 바뀌면 UI 갱신
	반대로 UI에서 데이터가 바뀐다고해서 Vue인스턴스의 값이 변경되는 것은 아니다.	
	
	종류
	1) V-TEXT, {{}}: innerText 속성과 같음
	2) v-html: innerHTML 속성과 같음 -> 태그까지 같이 보내버리면 html에 반영
	3) v-bind: 속성을 바인딩하기 위해 사용

▶ V-model 디렉티브 -> '양방향' 데이터 바인딩 지원!
	양방향 데이터 바인딩은 UI에서 데이터가 변경된다면, Vue인스턴스의 값도 변경되는 것을 말한다.
	input, select, checkbox 등등 모두 적용 가능

	※ 수식어	
		- lazy: 다른 요소로 포커스가 이동될 때 데이터 동기화
		- number: number타입으로 형변환

	- 여러 개 선택할 수 있는 경우 배열을 이용하여 받음 (checkbox)
	- 하나만 선택할 수 있는 경우 문자열로 받음

▶ 조건 렌더링 디렉티브
	조건에 따라 화면에 보여줄지 말지를 결정할 수 있다.	

	v-if="조건", v-else-if="조건", v-else="조건"
		자바, js에서의 조건문과 동일하게 작동한다. 조건이 false면 렌더링 수행x
		렌더링을 수행하지 않는다는 의미로 html요소를 생성하지 않는 것이다.

	v-show="조건"
		조건이 true이든 false이든 렌더링은 무조건 수행한다.
		단, false면 display = none 속성을 부여하여 화면에 보이지 않게한다.

▶ 반복 렌더링 디렉티브
	v-for
		배열이나 객체의 항목을 반복하여 렌더링 할 수 있다.

	key 속성
		각 항목에는 반드시 고유한 key 속성을 지정해야 한다.
		추후 항복에 변경사항을 효율적으로 추적하고 업데이트 하는데 도움을 준다.
		키 값이 중복되면 경고 표시가 뜬다.
		키 값으로 사용할 컬럼이 없을 경우 index를 명시해줘서 0부터 1씩 증가하는 인덱스 번호를 부여할 수 있다.(but, 권장하진 않음)

		※ key에 index를 부여하지 않은 이유

▶ 기타 디렉티브
	v-pre: 콧수염까지 있는 그대로 컴파일 하지 않고 출력 > 콧수염까지 문자열로 취급!
	v-once: 한 번 렌더링되면 다시 렌더링하지 않음
	v-cloak: 살짝 보이는 콧수염을 보이지 않게 한다.
		- Vue 인스턴스가 템플릿을 컴파일할 때 발생하는 시간 때문에 생기는 현상!