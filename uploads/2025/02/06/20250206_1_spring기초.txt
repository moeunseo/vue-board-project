▶ 서버란?
	클라이언트의 요청을 처리하고 응답하는 일련의 과정이 이루어지는 공간
	데이터 요청 시(select) 데이터를 주고, 처리 요청(insert, update ...) 시 처리만 해주는 클라이언트 요청대로 수행한다.
	우리가 주소창에 입력하는 것이 데이터를 요청한다고 생각하기 (ex. 네이버...)

▶ 포트란?
	ip는 컴퓨터를 식별하는 주소. ip를 알면 서버를 찾을 수 있다.
	하지만 포트까지 알아야 제대로된 서비스를 찾을 수 있다.
	예를 들어, ip가 대형마트라면 포트는 각각의 매대라고 생각하면 된다.
	우리가 흔히보는 url, 주소창에 있는 것들에도 전부 아이피와 포트번호가 들어가지만 직접 확인할 순 없다.
	그 이유는 ip와 port를 쉽게 알아보기 위해 주소를 붙여놨기 때문이다.

▶ 프레임워크란? (ex. spring)
	sw개발을 쉽게 하기 위한 소프트웨어 개발 환경
	개개인의 능력에 차이가 있는 개발자들도 같은 환경, 틀 안에서 개발을 진행하면서 능력의 차이를 줄일 수 있다.
	정해진 틀 안에서 개발해야한다는 점은 단점으로 보일 수 있으나, 개발 효율은 상당히 높다.

▶ 라이브러리란?
	애플리케이션 개발에 필요한 기능인 클래스, 함수 등을 모아놓은 코드의 모음
	라이브러리를 추가한다면 복잡한 코드를 직접 작성하지 않고도 원하는 기능을 사용할 수 있기에 개발도 편해지고 개발 속도도 빨라진다.
	또한 라이브러리는 독립적이기 때문에 서로 영향을 주지 않는다.

※ 프레임워크는 프로젝트의 전체적인 '구조'를 잡아주기 위해 사용하고, 라이브러리는 개발을 하는 과정에서 '기능 및 서비스'를 구현하기 위해 사용한다.

▶ 스프링 프레임워크 (경량[모듈] 프레임워크)
	자바 기반의 엔터프라이즈 애플리케이션 개발을 위한 프레임워크
	애플리케이션의 안정성, 서버 성능, 보안 등을 제공해주는 도구로 개발자들이 비지니스 로직(메소드 및 기능)에만 집중할 수 있도록 도와준다.
	장점이 많지만 설정이 매우 복잡하다.
	

▶ 스프링 부트 > 복잡한 설정들을 스프링 부트가 해준다.
	스프링 프레임워크를 더 쉽고 빠르게 이용할 수 있도록 만들어주는 도구로 개발자가 좀 더 비지니스 로직 개발에만 집중할 수 있도록 해준다.
	스프링 프레임워크 속에 속한 도구

▶ 스프링 프레임워크와 스프링 부트의 차이
	1) 개발 환경 설정
		- 스프링 프레임워크는 개발 환경을 수동으로 구성
		- 스프링 부트는 거의 모든 기능을 자동으로 로드, 개발 환경도 따로 구성할 필요 없다.

	2) WAS (Web Application Server)
		- 스프링 프레임워크는 프로젝트 실행에 필요한 서버를 별도로 다운 및 수동 설정
		- 스프링 부트는 내장형 서버를 제공해 별도의 설정이 필요 없다.

▶ 빌드 자동화 도구 (프로젝트 관리 도구)
	코드를 컴파일해주고, 패키징을 자동화하는 역할을 하는 도구
	종속성 관리 등 프로젝트의 전박전인 내용을 관리해준다.

	1) maven
		- pom.xml 파일에 프로젝트의 종속성, 빌드 설정, 플러그인 등을 정의
		- 표준화된 구조
		- 큰 프로젝트의 경우 가독성이 떨어진다.
		- 빌드 속도가 느린 편

	2) gradle
		- 스크립트 파일로 프로젝트의 종속성, 빌드 설정, 플러그인 등을 정의
		- 유연하고 확장성이 높은 구조
		- 설정이 간결하고 가독성이 좋다.
		- 복잡한 프로젝트라면 오히려 관리하기 힘들 수 있다.
		- 빌드 속도가 maven과 비교했을 때 빠른 편

▷ 스프링의 특징
▶ IoC (Inversion of Control, 제어의 역전)
	스프링 컨테이너가 객체를 관리하고, 제공하는 역할 (즉, 우리는 외부에서 클래스를 주입받아 객체를 생성하여 사용한다.)
	클래스를 스프링 컨테이너에 등록하여 주입받아 사용한다. (어노테이션을 사용)

▶ DI (Dependency Injection, 의존성 주입)
	제어의 역전을 구현하기 위해 사용하는 방법
	의존성 주입이란 다른 클래스에 의존한다는 뜻

	의존: A 객체가 B객체 없이 동작이 불가능한 상황을 'A가 B에 의존적이다'
	ex. 치킨 클래스와 튀길 기름 클래스가 있을 때, 치킨 클래스가 없이 튀길 기름 클래스는 동작할 일이 없다. 튀길 기름은 치킨 클래스에 의존적이라고 한다.

	주입
		어떤 객체가 필요로하는 객체를 외부에서 밀어 넣는 것을 의미.
		주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고 어떤 객체에 의존하든 자신의 역할은 변하지 않는다.

	그런데 우리가 생각했을 때 A클래스에서 B클래스 안에 있는 메소드를 사용하기 위해서는 B클래스의 정보를 메모리에 올리고,
	즉 객체를 만들어서 해당 위치에 있는 필드에 접근 할 수 있었다.
	근데 문법을 살펴보면 생성자를 호출하는 문법 자체가 없다. 메모리에 할당이 되지 않았는데 필드를 사용할 수 있는 것은 말이 안된다.
	하지만, 동작이 잘되는 이유는 스프링 컨테이너에서 객체를 주입했기 때문.
	스프링의 경우 클래스 A에서 B객체를 쓰고 싶은 경우 객체를 직접 생성하는 것이 아니라
	'스프링 컨테이너에서 객체를 주입받아 사용한다.'

	※ DI를 사용하면 클래스는 자신의 의존성을 생성자를 호출하여 생성하지 않고, 외부에서 주입 받는다.
	이는 클래스가 구체적인 구현에 의존하지 않고 인터페이스에 의존하게 되어 의존성 주입의 대상이 바뀌더라도
	클래스 자체는 수정할 필요가 없어진다. 이로 인해 클래스 간의 결합도가 낮아진다.

▶ 스프링 컨테이너
	스프링 컨테이너는 빈을 생성하고 관리한다.
	빈이 생성되고 소멸되기까지의 라이프 싸이클을 관리한다.
	@Autowired 어노테이션을 사용해 빈을 주입받을 수 있다.

▶ Bean
	스프링 컨테이너가 생성하고 관리하는 객체 > 스프링에서 제공해주는 객체를 '빈' 이라고 생각하기

	빈을 등록하는 방법
		1) xml파일 설정 (spring framework)
		2) 어노테이션을 이용한 추가 (spring boot)

▶ IoC, DI의 장점
	1) 객체 간 결합도 감소
		스프링 컨테이너를 통해 참조 받는 방식! 객체 간의 결합도를 낮춰 수정 시 영향을 덜 받게 한다.		

	2) 테스트 용이성
		DI를 통해 Mock(모의, 가짜) 객체를 주입할 수 있어 단위 테스트가 편해진다.
		테스트 코드에서는 실제 구현체를 사용하지 않는다.		

	3) 유연성과 확장성
		DI를 사용하면 필요한 정보를 외부에서 주입 받기 때문에 프로젝트의 유연성이 높아진다.
		환경 설정을 쉽게 변경할 수 있고 새로운 코드를 추가하는 식으로 확장도 편하게 할 수 있다.

	4) 재사용성 증가
		스프링 컨테이너가 빈을 관리하기에 다양한 곳에서 재사용을 편하게 할 수 있다.
		이는 코드의 중복을 줄이고 중앙에서 객체를 쉽게 관리할 수 있다.
​

▶ AOP  (Aspect Oriented Programming)
	'관점' 지향 프로그래밍
	프로그래밍에 대한 관심을 핵심 관점, 부가 관점으로 나누어 관심 기준으로 모듈화 하는 것

	핵심 관점: 게시글 작성, 회원가입
	부가 관점: DB 연결, 로깅 등등
	부가 관점에 해당하는 로직을 모듈화하면 핵심 관점 코드에만 집중할 수 있게 될 뿐 아니라 프로그램의 변경과 확장에도 유연하게 대응

▶ OOP 와 AOP 비교
	OOP
		데이터와 기능을 객체 단위로 묶어 모듈화, 상속과 다형성을 통해 코드 재사용, 시스템 구조 명확

	AOP
		공통된 부가 관점을 모듈화하여 비지니스 로직과 분리하고, 코드의 재사용과 유지보수성을 높이며 모듈화 해놓은 부가 관점은 여러 모듈에서 재사용 가능 
		> 비지니스 로직에 더 집중하기 위해 